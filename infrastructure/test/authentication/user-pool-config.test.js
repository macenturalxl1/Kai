"use strict";
/*
 * Copyright 2020 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const user_pool_config_1 = require("../../lib/authentication/user-pool-config");
const ERROR_MESSAGE_REGEXP = /is not a valid User Pool config/;
const VALID_EXTERNAL_POOL = {
    "userPoolId": "x",
    "userPoolClientId": "y"
};
const VALID_DEFAULT_CONFIG = {
    "userPoolProps": {},
    "userPoolClientOptions": {}
};
const VALID_EXTERNAL_POOL_CONFIG = {
    "externalPool": VALID_EXTERNAL_POOL
};
const VALID_DEFAULT_POOL_CONFIG = {
    "defaultPoolConfig": VALID_DEFAULT_CONFIG
};
test("Should throw Error when supplying undefined config", () => {
    expect(() => user_pool_config_1.UserPoolConfig.fromConfig()).toThrowError(ERROR_MESSAGE_REGEXP);
});
test("Should throw Error when supplying empty config", () => {
    expect(() => user_pool_config_1.UserPoolConfig.fromConfig({})).toThrowError(ERROR_MESSAGE_REGEXP);
});
test("Should throw Error when supplying both external and default config.", () => {
    expect(() => {
        user_pool_config_1.UserPoolConfig.fromConfig({
            "externalPool": {
                "userPoolId": "x",
                "userPoolClientId": "y"
            },
            "defaultPoolConfig": {}
        });
    }).toThrowError(ERROR_MESSAGE_REGEXP);
});
test("Should configure external user pool when supplying valid external config", () => {
    const pool = user_pool_config_1.UserPoolConfig.fromConfig(VALID_EXTERNAL_POOL_CONFIG);
    expect(pool.useExternalPool).toBe(true);
    expect(pool.useDefaultPool).toBe(false);
    expect(pool.externalPool).toStrictEqual(VALID_EXTERNAL_POOL);
    expect(pool.defaultPoolConfig).toBeUndefined();
});
test("Should configure default user pool when supplying valid default config", () => {
    const pool = user_pool_config_1.UserPoolConfig.fromConfig(VALID_DEFAULT_POOL_CONFIG);
    expect(pool.useExternalPool).toBe(false);
    expect(pool.useDefaultPool).toBe(true);
    expect(pool.externalPool).toBeUndefined();
    expect(pool.defaultPoolConfig).toStrictEqual(VALID_DEFAULT_CONFIG);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wb29sLWNvbmZpZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci1wb29sLWNvbmZpZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7QUFFSCxnRkFBK0g7QUFFL0gsTUFBTSxvQkFBb0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUUvRCxNQUFNLG1CQUFtQixHQUFrQjtJQUN2QyxZQUFZLEVBQUUsR0FBRztJQUNqQixrQkFBa0IsRUFBRSxHQUFHO0NBQzFCLENBQUM7QUFFRixNQUFNLG9CQUFvQixHQUF1QjtJQUM3QyxlQUFlLEVBQUUsRUFBRTtJQUNuQix1QkFBdUIsRUFBRSxFQUFFO0NBQzlCLENBQUM7QUFFRixNQUFNLDBCQUEwQixHQUFvQjtJQUNoRCxjQUFjLEVBQUUsbUJBQW1CO0NBQ3RDLENBQUM7QUFFRixNQUFNLHlCQUF5QixHQUFvQjtJQUMvQyxtQkFBbUIsRUFBRSxvQkFBb0I7Q0FDNUMsQ0FBQztBQUVGLElBQUksQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7SUFDNUQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlDQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNqRixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7SUFDeEQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlDQUFjLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDbkYsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscUVBQXFFLEVBQUUsR0FBRyxFQUFFO0lBQzdFLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDUixpQ0FBYyxDQUFDLFVBQVUsQ0FBQztZQUN0QixjQUFjLEVBQUU7Z0JBQ1osWUFBWSxFQUFFLEdBQUc7Z0JBQ2pCLGtCQUFrQixFQUFFLEdBQUc7YUFDMUI7WUFDRCxtQkFBbUIsRUFBRSxFQUFFO1NBQzFCLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDBFQUEwRSxFQUFFLEdBQUcsRUFBRTtJQUNsRixNQUFNLElBQUksR0FBbUIsaUNBQWMsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUNuRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNuRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3RUFBd0UsRUFBRSxHQUFHLEVBQUU7SUFDaEYsTUFBTSxJQUFJLEdBQW1CLGlDQUFjLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDbEYsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQ3Jvd24gQ29weXJpZ2h0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IElFeHRlcm5hbFBvb2wsIElEZWZhdWx0UG9vbENvbmZpZywgSVVzZXJQb29sQ29uZmlnLCBVc2VyUG9vbENvbmZpZyB9IGZyb20gXCIuLi8uLi9saWIvYXV0aGVudGljYXRpb24vdXNlci1wb29sLWNvbmZpZ1wiO1xuXG5jb25zdCBFUlJPUl9NRVNTQUdFX1JFR0VYUCA9IC9pcyBub3QgYSB2YWxpZCBVc2VyIFBvb2wgY29uZmlnLztcblxuY29uc3QgVkFMSURfRVhURVJOQUxfUE9PTDogSUV4dGVybmFsUG9vbCA9IHtcbiAgICBcInVzZXJQb29sSWRcIjogXCJ4XCIsXG4gICAgXCJ1c2VyUG9vbENsaWVudElkXCI6IFwieVwiXG59O1xuXG5jb25zdCBWQUxJRF9ERUZBVUxUX0NPTkZJRzogSURlZmF1bHRQb29sQ29uZmlnID0ge1xuICAgIFwidXNlclBvb2xQcm9wc1wiOiB7fSxcbiAgICBcInVzZXJQb29sQ2xpZW50T3B0aW9uc1wiOiB7fVxufTtcblxuY29uc3QgVkFMSURfRVhURVJOQUxfUE9PTF9DT05GSUc6IElVc2VyUG9vbENvbmZpZyA9IHtcbiAgICBcImV4dGVybmFsUG9vbFwiOiBWQUxJRF9FWFRFUk5BTF9QT09MXG59O1xuXG5jb25zdCBWQUxJRF9ERUZBVUxUX1BPT0xfQ09ORklHOiBJVXNlclBvb2xDb25maWcgPSB7XG4gICAgXCJkZWZhdWx0UG9vbENvbmZpZ1wiOiBWQUxJRF9ERUZBVUxUX0NPTkZJR1xufTtcblxudGVzdChcIlNob3VsZCB0aHJvdyBFcnJvciB3aGVuIHN1cHBseWluZyB1bmRlZmluZWQgY29uZmlnXCIsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gVXNlclBvb2xDb25maWcuZnJvbUNvbmZpZygpKS50b1Rocm93RXJyb3IoRVJST1JfTUVTU0FHRV9SRUdFWFApO1xufSk7XG5cbnRlc3QoXCJTaG91bGQgdGhyb3cgRXJyb3Igd2hlbiBzdXBwbHlpbmcgZW1wdHkgY29uZmlnXCIsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gVXNlclBvb2xDb25maWcuZnJvbUNvbmZpZyh7fSkpLnRvVGhyb3dFcnJvcihFUlJPUl9NRVNTQUdFX1JFR0VYUCk7XG59KTtcblxudGVzdChcIlNob3VsZCB0aHJvdyBFcnJvciB3aGVuIHN1cHBseWluZyBib3RoIGV4dGVybmFsIGFuZCBkZWZhdWx0IGNvbmZpZy5cIiwgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIFVzZXJQb29sQ29uZmlnLmZyb21Db25maWcoe1xuICAgICAgICAgICAgXCJleHRlcm5hbFBvb2xcIjoge1xuICAgICAgICAgICAgICAgIFwidXNlclBvb2xJZFwiOiBcInhcIixcbiAgICAgICAgICAgICAgICBcInVzZXJQb29sQ2xpZW50SWRcIjogXCJ5XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRlZmF1bHRQb29sQ29uZmlnXCI6IHt9XG4gICAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3dFcnJvcihFUlJPUl9NRVNTQUdFX1JFR0VYUCk7XG59KTtcblxudGVzdChcIlNob3VsZCBjb25maWd1cmUgZXh0ZXJuYWwgdXNlciBwb29sIHdoZW4gc3VwcGx5aW5nIHZhbGlkIGV4dGVybmFsIGNvbmZpZ1wiLCAoKSA9PiB7XG4gICAgY29uc3QgcG9vbDogVXNlclBvb2xDb25maWcgPSBVc2VyUG9vbENvbmZpZy5mcm9tQ29uZmlnKFZBTElEX0VYVEVSTkFMX1BPT0xfQ09ORklHKTtcbiAgICBleHBlY3QocG9vbC51c2VFeHRlcm5hbFBvb2wpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHBvb2wudXNlRGVmYXVsdFBvb2wpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChwb29sLmV4dGVybmFsUG9vbCkudG9TdHJpY3RFcXVhbChWQUxJRF9FWFRFUk5BTF9QT09MKTtcbiAgICBleHBlY3QocG9vbC5kZWZhdWx0UG9vbENvbmZpZykudG9CZVVuZGVmaW5lZCgpO1xufSk7XG5cbnRlc3QoXCJTaG91bGQgY29uZmlndXJlIGRlZmF1bHQgdXNlciBwb29sIHdoZW4gc3VwcGx5aW5nIHZhbGlkIGRlZmF1bHQgY29uZmlnXCIsICgpID0+IHtcbiAgICBjb25zdCBwb29sOiBVc2VyUG9vbENvbmZpZyA9IFVzZXJQb29sQ29uZmlnLmZyb21Db25maWcoVkFMSURfREVGQVVMVF9QT09MX0NPTkZJRyk7XG4gICAgZXhwZWN0KHBvb2wudXNlRXh0ZXJuYWxQb29sKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocG9vbC51c2VEZWZhdWx0UG9vbCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocG9vbC5leHRlcm5hbFBvb2wpLnRvQmVVbmRlZmluZWQoKTtcbiAgICBleHBlY3QocG9vbC5kZWZhdWx0UG9vbENvbmZpZykudG9TdHJpY3RFcXVhbChWQUxJRF9ERUZBVUxUX0NPTkZJRyk7XG59KTtcbiJdfQ==