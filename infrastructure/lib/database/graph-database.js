"use strict";
/*
 * Copyright 2020 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphDatabase = void 0;
const cdk = require("@aws-cdk/core");
const dynamo = require("@aws-cdk/aws-dynamodb");
/**
 * The underlying database for Graphs.
 */
class GraphDatabase extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Table
        this._table = new dynamo.Table(this, "GraphDynamoTable", {
            partitionKey: { name: "graphId", type: dynamo.AttributeType.STRING },
            billingMode: dynamo.BillingMode.PROVISIONED,
            removalPolicy: cdk.RemovalPolicy.DESTROY
        });
        // Autoscaling
        const scalingProps = {
            minCapacity: props.minCapacity,
            maxCapacity: props.maxCapacity
        };
        const utilisationProps = {
            targetUtilizationPercent: props.targetUtilizationPercent
        };
        const readScaling = this._table.autoScaleReadCapacity(scalingProps);
        readScaling.scaleOnUtilization(utilisationProps);
        const writeScaling = this._table.autoScaleWriteCapacity(scalingProps);
        writeScaling.scaleOnUtilization(utilisationProps);
    }
    get table() {
        return this._table;
    }
}
exports.GraphDatabase = GraphDatabase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGgtZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJncmFwaC1kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUVILHFDQUFxQztBQUNyQyxnREFBZ0Q7QUFHaEQ7O0dBRUc7QUFDSCxNQUFhLGFBQWMsU0FBUSxHQUFHLENBQUMsU0FBUztJQUc1QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCO1FBQ25FLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsUUFBUTtRQUVSLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNyRCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNwRSxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXO1lBQzNDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87U0FDM0MsQ0FBQyxDQUFDO1FBRUgsY0FBYztRQUVkLE1BQU0sWUFBWSxHQUE4QjtZQUM1QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1NBQ2pDLENBQUM7UUFFRixNQUFNLGdCQUFnQixHQUFtQztZQUNyRCx3QkFBd0IsRUFBRSxLQUFLLENBQUMsd0JBQXdCO1NBQzNELENBQUM7UUFFRixNQUFNLFdBQVcsR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3JFLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRWpELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFdEQsQ0FBQztJQUVELElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0NBQ0o7QUFwQ0Qsc0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIENyb3duIENvcHlyaWdodFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcbmltcG9ydCAqIGFzIGR5bmFtbyBmcm9tIFwiQGF3cy1jZGsvYXdzLWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBHcmFwaERhdGFiYXNlUHJvcHMgfSBmcm9tIFwiLi9ncmFwaC1kYXRhYmFzZS1wcm9wc1wiO1xuXG4vKipcbiAqIFRoZSB1bmRlcmx5aW5nIGRhdGFiYXNlIGZvciBHcmFwaHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaERhdGFiYXNlIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGFibGU6IGR5bmFtby5UYWJsZTtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogR3JhcGhEYXRhYmFzZVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgICAgIFxuICAgICAgICAvLyBUYWJsZVxuXG4gICAgICAgIHRoaXMuX3RhYmxlID0gbmV3IGR5bmFtby5UYWJsZSh0aGlzLCBcIkdyYXBoRHluYW1vVGFibGVcIiwge1xuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6IFwiZ3JhcGhJZFwiLCB0eXBlOiBkeW5hbW8uQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgICAgICAgICAgIGJpbGxpbmdNb2RlOiBkeW5hbW8uQmlsbGluZ01vZGUuUFJPVklTSU9ORUQsXG4gICAgICAgICAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEF1dG9zY2FsaW5nXG5cbiAgICAgICAgY29uc3Qgc2NhbGluZ1Byb3BzOiBkeW5hbW8uRW5hYmxlU2NhbGluZ1Byb3BzID0ge1xuICAgICAgICAgICAgbWluQ2FwYWNpdHk6IHByb3BzLm1pbkNhcGFjaXR5LFxuICAgICAgICAgICAgbWF4Q2FwYWNpdHk6IHByb3BzLm1heENhcGFjaXR5XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdXRpbGlzYXRpb25Qcm9wczogZHluYW1vLlV0aWxpemF0aW9uU2NhbGluZ1Byb3BzID0ge1xuICAgICAgICAgICAgdGFyZ2V0VXRpbGl6YXRpb25QZXJjZW50OiBwcm9wcy50YXJnZXRVdGlsaXphdGlvblBlcmNlbnRcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZWFkU2NhbGluZyAgPSB0aGlzLl90YWJsZS5hdXRvU2NhbGVSZWFkQ2FwYWNpdHkoc2NhbGluZ1Byb3BzKTtcbiAgICAgICAgcmVhZFNjYWxpbmcuc2NhbGVPblV0aWxpemF0aW9uKHV0aWxpc2F0aW9uUHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IHdyaXRlU2NhbGluZyA9IHRoaXMuX3RhYmxlLmF1dG9TY2FsZVdyaXRlQ2FwYWNpdHkoc2NhbGluZ1Byb3BzKTtcbiAgICAgICAgd3JpdGVTY2FsaW5nLnNjYWxlT25VdGlsaXphdGlvbih1dGlsaXNhdGlvblByb3BzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdGFibGUoKTogZHluYW1vLlRhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlO1xuICAgIH1cbn0iXX0=