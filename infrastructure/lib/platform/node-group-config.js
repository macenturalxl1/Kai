"use strict";
/*
 * Copyright 2020 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeGroupConfig = void 0;
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
class NodeGroupConfig {
    constructor(instanceType, minSize, maxSize, desiredSize) {
        this._instanceType = instanceType;
        this._minSize = minSize;
        this._maxSize = maxSize;
        this._desiredSize = desiredSize;
    }
    get instanceType() {
        return this._instanceType;
    }
    get minSize() {
        return this._minSize;
    }
    get maxSize() {
        return this._maxSize;
    }
    get desiredSize() {
        return this._desiredSize;
    }
    /**
     * Performs a typesafe conversion into a NodeGroupConfig class
     * @param config config object
     */
    static fromConfig(config) {
        if (NodeGroupConfig.isConfig(config)) {
            return new NodeGroupConfig(config.instanceType, config.minSize, config.maxSize, config.desiredSize);
        }
        else {
            throw new Error(config + " is not a valid Node group config");
        }
    }
    static isConfig(obj) {
        if (obj == null) {
            return false;
        }
        return (obj.instanceType == null || typeof obj.instanceType == "string") &&
            (obj.minSize == null || typeof obj.minSize == "number") &&
            (obj.maxSize == null || typeof obj.maxSize == "number") &&
            (obj.desiredSize == null || typeof obj.desiredSize == "number");
    }
    /**
     * Converts this config object into one that can be used with the CDK.
     */
    toNodeGroupOptions() {
        return {
            instanceType: this.instanceType != null ? new aws_ec2_1.InstanceType(this.instanceType) : NodeGroupConfig.DEFAULT_NODE_GROUP.instanceType,
            maxSize: this.maxSize != null ? this.maxSize : NodeGroupConfig.DEFAULT_NODE_GROUP.maxSize,
            minSize: this.minSize != null ? this.minSize : NodeGroupConfig.DEFAULT_NODE_GROUP.minSize,
            desiredSize: this.desiredSize != null ? this.desiredSize : NodeGroupConfig.DEFAULT_NODE_GROUP.desiredSize
        };
    }
}
exports.NodeGroupConfig = NodeGroupConfig;
NodeGroupConfig.DEFAULT_NODE_GROUP = {
    instanceType: new aws_ec2_1.InstanceType("t3.medium"),
    minSize: 1,
    maxSize: 10,
    desiredSize: 2
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1ncm91cC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub2RlLWdyb3VwLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUdILDhDQUFnRDtBQVNoRCxNQUFhLGVBQWU7SUFjeEIsWUFDSSxZQUFxQixFQUNyQixPQUFnQixFQUNoQixPQUFnQixFQUNoQixXQUFvQjtRQUVwQixJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQVcsV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBd0I7UUFDN0MsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZHO2FBQU07WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0wsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBcUI7UUFDekMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxJQUFJLElBQUksT0FBTyxHQUFHLENBQUMsWUFBWSxJQUFJLFFBQVEsQ0FBQztZQUN4RSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sR0FBRyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUM7WUFDdkQsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLEdBQUcsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDO1lBQ3ZELENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxJQUFJLElBQUksT0FBTyxHQUFHLENBQUMsV0FBVyxJQUFJLFFBQVEsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7T0FFRztJQUNJLGtCQUFrQjtRQUNyQixPQUFPO1lBQ0gsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsWUFBWTtZQUMvSCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPO1lBQ3pGLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLE9BQU87WUFDekYsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsV0FBVztTQUM1RyxDQUFDO0lBQ04sQ0FBQzs7QUEzRUwsMENBNEVDO0FBMUUwQixrQ0FBa0IsR0FBcUI7SUFDMUQsWUFBWSxFQUFFLElBQUksc0JBQVksQ0FBQyxXQUFXLENBQUM7SUFDM0MsT0FBTyxFQUFFLENBQUM7SUFDVixPQUFPLEVBQUUsRUFBRTtJQUNYLFdBQVcsRUFBRSxDQUFDO0NBQ2pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQ3Jvd24gQ29weXJpZ2h0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE5vZGVncm91cE9wdGlvbnMgfSBmcm9tIFwiQGF3cy1jZGsvYXdzLWVrc1wiO1xuaW1wb3J0IHsgSW5zdGFuY2VUeXBlIH0gZnJvbSBcIkBhd3MtY2RrL2F3cy1lYzJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTm9kZUdyb3VwQ29uZmlnIHtcbiAgICBpbnN0YW5jZVR5cGU/OiBzdHJpbmc7XG4gICAgbWluU2l6ZT86IG51bWJlcjtcbiAgICBtYXhTaXplPzogbnVtYmVyO1xuICAgIGRlc2lyZWRTaXplPzogbnVtYmVyOyBcbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVHcm91cENvbmZpZyBpbXBsZW1lbnRzIElOb2RlR3JvdXBDb25maWcge1xuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9OT0RFX0dST1VQOiBOb2RlZ3JvdXBPcHRpb25zID0ge1xuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBJbnN0YW5jZVR5cGUoXCJ0My5tZWRpdW1cIiksXG4gICAgICAgIG1pblNpemU6IDEsXG4gICAgICAgIG1heFNpemU6IDEwLFxuICAgICAgICBkZXNpcmVkU2l6ZTogMlxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luc3RhbmNlVHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX21pblNpemU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXhTaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGVzaXJlZFNpemU6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpbnN0YW5jZVR5cGU/OiBzdHJpbmcsXG4gICAgICAgIG1pblNpemU/OiBudW1iZXIsXG4gICAgICAgIG1heFNpemU/OiBudW1iZXIsXG4gICAgICAgIGRlc2lyZWRTaXplPzogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlVHlwZSA9IGluc3RhbmNlVHlwZTtcbiAgICAgICAgdGhpcy5fbWluU2l6ZSA9IG1pblNpemU7XG4gICAgICAgIHRoaXMuX21heFNpemUgPSBtYXhTaXplO1xuICAgICAgICB0aGlzLl9kZXNpcmVkU2l6ZSA9IGRlc2lyZWRTaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaW5zdGFuY2VUeXBlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZVR5cGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW5TaXplKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5TaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbWF4U2l6ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4U2l6ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRlc2lyZWRTaXplKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNpcmVkU2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHR5cGVzYWZlIGNvbnZlcnNpb24gaW50byBhIE5vZGVHcm91cENvbmZpZyBjbGFzc1xuICAgICAqIEBwYXJhbSBjb25maWcgY29uZmlnIG9iamVjdFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbUNvbmZpZyhjb25maWc6IElOb2RlR3JvdXBDb25maWcpOiBOb2RlR3JvdXBDb25maWcge1xuICAgICAgICBpZiAoTm9kZUdyb3VwQ29uZmlnLmlzQ29uZmlnKGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUdyb3VwQ29uZmlnKGNvbmZpZy5pbnN0YW5jZVR5cGUsIGNvbmZpZy5taW5TaXplLCBjb25maWcubWF4U2l6ZSwgY29uZmlnLmRlc2lyZWRTaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb25maWcgKyBcIiBpcyBub3QgYSB2YWxpZCBOb2RlIGdyb3VwIGNvbmZpZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGlzQ29uZmlnKG9iajogSU5vZGVHcm91cENvbmZpZyk6IG9iaiBpcyBJTm9kZUdyb3VwQ29uZmlnIHtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG9iai5pbnN0YW5jZVR5cGUgPT0gbnVsbCB8fCB0eXBlb2Ygb2JqLmluc3RhbmNlVHlwZSA9PSBcInN0cmluZ1wiKSAmJlxuICAgICAgICAob2JqLm1pblNpemUgPT0gbnVsbCB8fCB0eXBlb2Ygb2JqLm1pblNpemUgPT0gXCJudW1iZXJcIikgJiZcbiAgICAgICAgKG9iai5tYXhTaXplID09IG51bGwgfHwgdHlwZW9mIG9iai5tYXhTaXplID09IFwibnVtYmVyXCIpICYmXG4gICAgICAgIChvYmouZGVzaXJlZFNpemUgPT0gbnVsbCB8fCB0eXBlb2Ygb2JqLmRlc2lyZWRTaXplID09IFwibnVtYmVyXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgY29uZmlnIG9iamVjdCBpbnRvIG9uZSB0aGF0IGNhbiBiZSB1c2VkIHdpdGggdGhlIENESy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9Ob2RlR3JvdXBPcHRpb25zKCk6IE5vZGVncm91cE9wdGlvbnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiB0aGlzLmluc3RhbmNlVHlwZSAhPSBudWxsID8gbmV3IEluc3RhbmNlVHlwZSh0aGlzLmluc3RhbmNlVHlwZSkgOiBOb2RlR3JvdXBDb25maWcuREVGQVVMVF9OT0RFX0dST1VQLmluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIG1heFNpemU6IHRoaXMubWF4U2l6ZSAhPSBudWxsID8gdGhpcy5tYXhTaXplIDogTm9kZUdyb3VwQ29uZmlnLkRFRkFVTFRfTk9ERV9HUk9VUC5tYXhTaXplLFxuICAgICAgICAgICAgbWluU2l6ZTogdGhpcy5taW5TaXplICE9IG51bGwgPyB0aGlzLm1pblNpemUgOiBOb2RlR3JvdXBDb25maWcuREVGQVVMVF9OT0RFX0dST1VQLm1pblNpemUsXG4gICAgICAgICAgICBkZXNpcmVkU2l6ZTogdGhpcy5kZXNpcmVkU2l6ZSAhPSBudWxsID8gdGhpcy5kZXNpcmVkU2l6ZSA6IE5vZGVHcm91cENvbmZpZy5ERUZBVUxUX05PREVfR1JPVVAuZGVzaXJlZFNpemVcbiAgICAgICAgfTtcbiAgICB9XG59Il19